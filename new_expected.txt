[
    [
        Some(TypeValueState({[120]: Integer(U8(MyRange { start: 0, end: 0 }))})), 
        Some(TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))})), 
        None, 
        None, 
        None, 
        Some(TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))})), 
        Some(TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))}))
    ], 
    [
        Some(TypeValueState({[120]: Integer(I8(MyRange { start: 0, end: 0 }))})), 
        Some(TypeValueState({[120]: Integer(I8(MyRange { start: -1, end: -1 }))})), 
        None,
        Some(TypeValueState({[120]: Integer(I8(MyRange { start: -1, end: -1 }))})), 
        Some(TypeValueState({[120]: Integer(I8(MyRange { start: -1, end: -1 }))})), 
        None, 
        None
    ], 
    [
        Some(TypeValueState({[120]: Integer(I16(MyRange { start: 0, end: 0 }))})), 
        Some(TypeValueState({[120]: Integer(I16(MyRange { start: -1, end: -1 }))})), 
        None,
        Some(TypeValueState({[120]: Integer(I16(MyRange { start: -1, end: -1 }))})), 
        Some(TypeValueState({[120]: Integer(I16(MyRange { start: -1, end: -1 }))})), 
        None, 
        None
    ]
]

[
    Some((Node { statement: Statement { comptime: false, op: Intrinsic(Assign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(0))] }, child: None, next: Some(1) }, TypeValueState({[120]: Integer(U8(MyRange { start: 0, end: 0 }))}))), 
    Some((Node { statement: Statement { comptime: false, op: Intrinsic(SubAssign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(1))] }, child: None, next: Some(2) }, TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))}))), 
    None, 
    None, 
    None, 
    Some((Node { statement: Statement { comptime: false, op: Special(Require(Le)), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(255))] }, child: None, next: Some(6) }, TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))}))), 
    Some((Node { statement: Statement { comptime: false, op: Syscall(Exit), arg: [Literal(Integer(0))] }, child: None, next: None }, TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))})))
]

[
    Some((Node { statement: Statement { comptime: false, op: Intrinsic(Assign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(0))] }, child: None, next: Some(1) }, TypeValueState({[120]: Integer(U8(MyRange { start: 0, end: 0 }))}))), 
    Some((Node { statement: Statement { comptime: false, op: Intrinsic(SubAssign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(1))] }, child: None, next: Some(5) }, TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))}))), 
    None, 
    None, 
    None, 
    Some((Node { statement: Statement { comptime: false, op: Special(Require(Le)), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(255))] }, child: None, next: Some(6) }, TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))}))), 
    Some((Node { statement: Statement { comptime: false, op: Syscall(Exit), arg: [Literal(Integer(0))] }, child: None, next: None }, TypeValueState({[120]: Integer(U8(MyRange { start: 255, end: 255 }))})))
]

[
    Node { statement: Statement { comptime: false, op: Intrinsic(Assign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(0))] }, child: None, next: Some(1) }, 
    Node { statement: Statement { comptime: false, op: Intrinsic(SubAssign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(1))] }, child: None, next: Some(2) },
    Node { statement: Statement { comptime: false, op: Special(Require(Le)), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(255))] }, child: None, next: Some(6) },
    Node { statement: Statement { comptime: false, op: Syscall(Exit), arg: [Literal(Integer(0))] }, child: None, next: None }
]

[
    Node { statement: Statement { comptime: false, op: Intrinsic(Assign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(0))] }, child: None, next: Some(1) },
    Node { statement: Statement { comptime: false, op: Intrinsic(SubAssign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(1))] }, child: None, next: Some(2) },
    Node { statement: Statement { comptime: false, op: Syscall(Exit), arg: [Literal(Integer(0))] }, child: None, next: None }
]

[
    Node { statement: Statement { comptime: false, op: Special(Type), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Type(U8)] }, child: None, next: Some(1) }, 
    Node { statement: Statement { comptime: false, op: Intrinsic(Assign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(0))] }, child: None, next: Some(2) }, 
    Node { statement: Statement { comptime: false, op: Intrinsic(SubAssign), arg: [Variable(Variable { identifier: Ok("x"), index: None }), Literal(Integer(1))] }, child: None, next: Some(3) }, 
    Node { statement: Statement { comptime: false, op: Syscall(Exit), arg: [Literal(Integer(0))] }, child: None, next: None }
]